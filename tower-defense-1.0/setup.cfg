[metadata]
# Name of the installed pip package.
name = tower
# Where in the package to find a version identifier
version = attr: tower.VERSION
# Description of the project
description = Inspired Python Tower Defense Game
# Much longer desription; search README.rst
long_description = file: README.rst, LICENSE.rst
license = Copyright (C) 2022 Inspired Python. All Rights Reserved.
# Not important unless you upload to pypi.
classifiers =
    Programming Language :: Python :: 3

[options]
zip_safe = false
# Where to find our code. You can leave it blank and it'll autodiscover package names
packages = find:
# Minimum python version we support
python_requires = >= 3.8
# List of packages to install automatically when _this_ package is
# installed. I've pinned the dependencies here, but you could just as
# easily use `pip-tools` to pip-compile to a requirements.txt file and
# use pip-sync to install.
install_requires =
    pygame==2.*
    click==8.*
    structlog

# Instructs setuptools to incude non-python resources -- like our
# assets -- in the package structure if it finds any matching these
# wildcards in those package locations. Without this, the resources
# wouldn't get wrapped up if we generate a binary or source
# distribution
[options.package_data]
tower.assets.gfx = *.png
tower.assets.audio = *.wav, *.ogg
tower.assets.levels = *.json

[options.entry_points]
# This is a console entry point. That means you can type `tower` to
# run the `main` function in the package `tower.main`.
#
# Optional, but a useful aid if you want to install a command-line app for users.
console_scripts =
    tower = tower.main:main

[options.extras_require]
# Extra package dependencies if we want to install a development
# environment (as opposed to a normal environment for just running the
# game)
dev =
   ipython
   ipdb
   pylint
   black
   black-macchiato
   tox
